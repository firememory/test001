package com.core.abs;import java.util.Iterator;import java.util.Map;import org.apache.log4j.Logger;import com.core.IBiz;import com.util.FIDConstants;import com.util.FieldType;import com.util.SysConstants;/** * <code>DataHandler</code> 主要与顶点柜台的交互. *  */public abstract class DataHandler implements IBiz {	protected Logger log = Logger.getLogger(super.getClass());	protected int[][] asResponseField;	protected int[][] asRequestField;	protected boolean isDataSet = true;		protected int iFunID;		protected Map<Integer, String> fieldMap;;	/**	 * 	 */	public DataHandler() {		buildField();	}	/* (non-Javadoc)	 * @see com.core.IBiz#requestData(java.util.Map)	 */	public String requestData(Map<String, String> hRequestParams) {		ConnManager connManager = ConnManager.getInstance();		int iConnID = connManager.getConnection();		String sMsg = "";		if (iConnID != 0) {			int iSessionID = 0;			try {				iSessionID = createSession(iConnID);				createHeadPack(iConnID, iSessionID);				createHead(iSessionID, iFunID);				setMsgParams(iSessionID, hRequestParams);				sMsg = request(iSessionID);			} finally {				// Make sure that the session should be released.				try {					ABOSS2Inf.releaseSession(iSessionID);				}finally {					connManager.freeConnection(iConnID);				}			}		} else {			sMsg = "R01|交易服务器连接错误.";		}		return sMsg;	}	/**	 * @param iSessionID	 * @return	 */	protected String request(int iSessionID) {		int runResult = ABOSS2Inf.dllRun(iSessionID);		String message = "";		if (runResult == 1) {			message = "R00|";			if (isDataSet) {				int dataRow = ABOSS2Inf.getCount(iSessionID);				log.debug("dataRow:" + dataRow);				for (int i = 0; i < dataRow; i++) {					message += getRecvMsgByField(this.asResponseField, iSessionID, 128, i);				}			} else {				message += getRecvMsgByField(this.asResponseField, iSessionID, 128, 0);			}		} else {			message = "R01|" + ABOSS2Inf.getErrMsg(iSessionID);		}		log.info("message:" + message);		return message;	}	/**	 * 设置发送请求的参数	 * 	 * @param iSessionId	 * @param hRequestParams	 */	public void setMsgParams(int iSessionId, Map<String, String> hRequestParams) {		Iterator<Integer> iter = getFieldMap().keySet().iterator();		while (iter.hasNext()) {			Integer oKey = iter.next();			String sReqKey = fieldMap.get(oKey);			String sValue = hRequestParams.get(sReqKey);			if (oKey == FIDConstants.FID_EXFLG					|| oKey == FIDConstants.FID_JMLX) {				sValue = this.getFieldMap().get(oKey);			} if (oKey == FIDConstants.FID_JYMM 					|| oKey == FIDConstants.FID_ZJMM					|| oKey == FIDConstants.FID_MM					|| oKey == FIDConstants.FID_NEWMM					|| oKey == FIDConstants.FID_WBZHMM) {				sValue = ABOSS2Inf.encode(sValue);			}			ABOSS2Inf.setString(iSessionId, oKey, sValue);		}	}	/**	 * 设置接收数据字段	 * @param sField	 * @param sessionId	 * @param size	 * @param index	 * @return	 */	protected String getRecvMsgByField(int[][] sField, int sessionId, int size, int index) {		StringBuffer sBuffer = new StringBuffer("");		for (int i = 0; i < sField.length; i++) {			if (sField[i][1] == FieldType.FieldString) {				sBuffer.append(ABOSS2Inf.getItem(sessionId, sField[i][0], size, index));			} else {				sBuffer.append(ABOSS2Inf.getItemForString(sessionId, sField[i][0], size, index));			}			sBuffer.append(";");		}		sBuffer.append("|");		return sBuffer.toString();	}	/**	 * 设置接收数据字段	 * 	 * @param sField	 * @param sessionId	 * @param size	 * @return	 */	/*protected String getRecvMsgByField(int[][] sField, int sessionId, int size) {		String message = "";		for (int i = 0; i < sField.length; i++) {			if (sField[i][1] == FieldType.FieldString) {				message += ABOSS2Inf.getItem(sessionId, sField[i][0], size, 0);				System.err.println(message);			} else {				message += ABOSS2Inf.getItemForString(sessionId, sField[i][0], size, 0);				System.err.println(message);			}			message += ";";		}		message += "|";		return message;	}*/	/**	 * @param iConnID	 * @param sessionId	 */	public void createHeadPack(int iConnID, int sessionId) {		ABOSS2Inf.setSessionTimeOut(iConnID, SysConstants.ABS.SessionTimeOut);		ABOSS2Inf.setFBDM(sessionId, SysConstants.ABS.FBDM);		ABOSS2Inf.setDestFBDM(sessionId, SysConstants.ABS.DestFBDM);		ABOSS2Inf.setNode(sessionId, SysConstants.ABS.Node);		ABOSS2Inf.setGYDM(sessionId, SysConstants.ABS.GYDM);		ABOSS2Inf.setWTFS(sessionId, SysConstants.ABS.WTFS);	}	/**	 * @return	 */	protected int createSession(int iConnID) {		return ABOSS2Inf.initAllocateSession(iConnID);	}	/**	 * @param sessionId	 * @param funId	 * @return	 */	public int createHead(int sessionId, int funId) {		return ABOSS2Inf.createHead(sessionId, funId);	}	/**	 * 	 */	protected abstract void buildField();		public Map<Integer, String> getFieldMap() {		return this.fieldMap;	}	public void setFieldMap(Map<Integer, String> fieldMap) {		this.fieldMap = fieldMap;	}	public int[][] getAsResponseField() {		return this.asResponseField;	}	public void setAsResponseField(int[][] asResponseField) {		this.asResponseField = asResponseField;	}	public int[][] getAsRequestField() {		return this.asRequestField;	}	public void setAsRequestField(int[][] asRequestField) {		this.asRequestField = asRequestField;	}	public int[][] getRequestField() {		return this.asRequestField;	}	/**	 * @param sStr	 * @return	 */	/*public String filterLog(String sStr) {		return LogUtil.logRecordFilter(sStr, SysConstants.LOG_FILTER_FORMAT,				SysConstants.LOG_PASSWORD_REPLACE_TXT);	}	protected String formatMultiResult(String[] sField, int iNum) {		StringBuffer oBuffer = new StringBuffer();		return oBuffer.toString();	}*/}